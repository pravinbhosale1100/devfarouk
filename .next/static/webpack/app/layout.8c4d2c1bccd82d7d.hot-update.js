"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./datas/data.ts":
/*!***********************!*\
  !*** ./datas/data.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   companies: function() { return /* binding */ companies; },\n/* harmony export */   companiesInfo: function() { return /* binding */ companiesInfo; },\n/* harmony export */   sections: function() { return /* binding */ sections; },\n/* harmony export */   socialLinks: function() { return /* binding */ socialLinks; },\n/* harmony export */   technologies: function() { return /* binding */ technologies; }\n/* harmony export */ });\nconst socialLinks = [\n    {\n        name: \"Github\",\n        link: \"https://github.com/pravinbhosale1100\",\n        simpleIcon: \"https://cdn.simpleicons.org/github\"\n    },\n    {\n        name: \"LinkedIn\",\n        link: \"https://in.linkedin.com/in/pravin-bhosale-232385250\",\n        simpleIcon: \"https://cdn.simpleicons.org/linkedin\"\n    },\n    {\n        name: \"X\",\n        link: \"https://x.com\",\n        simpleIcon: \"https://cdn.simpleicons.org/x\"\n    },\n    {\n        name: \"Instagram\",\n        link: \"https://www.instagram.com\",\n        simpleIcon: \"https://cdn.simpleicons.org/instagram\"\n    }\n];\nconst technologies = [\n    {\n        name: \"NextJs\",\n        iconLink: \"https://cdn.simpleicons.org/nextdotjs\"\n    },\n    {\n        name: \"React\",\n        iconLink: \"https://cdn.simpleicons.org/react\"\n    },\n    {\n        name: \"TailwindCss\",\n        iconLink: \"https://cdn.simpleicons.org/tailwindcss\"\n    },\n    {\n        name: \"Framer Motion\",\n        iconLink: \"https://cdn.simpleicons.org/framer\"\n    },\n    {\n        name: \"Sass\",\n        iconLink: \"https://cdn.simpleicons.org/sass\"\n    },\n    {\n        name: \"Git\",\n        iconLink: \"https://cdn.simpleicons.org/git\"\n    },\n    {\n        name: \"Chakra UI\",\n        iconLink: \"https://cdn.simpleicons.org/chakraui\"\n    },\n    {\n        name: \"Shadcn/ui\",\n        iconLink: \"https://cdn.simpleicons.org/shadcnui\"\n    }\n];\nconst sections = [\n    {\n        idRoute: \"#about\",\n        name: \"About\"\n    },\n    {\n        idRoute: \"#experience\",\n        name: \"Experience\"\n    },\n    {\n        idRoute: \"#works\",\n        name: \"Works\"\n    },\n    {\n        idRoute: \"#contact\",\n        name: \"Contact\"\n    }\n];\nconst companies = [\n    \"Pathpalz\",\n    \"Berrystamp\",\n    \"Busineess Prompt\",\n    \"Deep Focus\",\n    \"JustDo Startup\"\n];\nconst companiesInfo = [\n    {\n        title: \"Asp Dot Net Devloper\",\n        company: \"Aloha Technology\",\n        location: \"Pune, India\",\n        duration: \"February 2023 - September 2024\",\n        roles: [\n            \"Implemented real-time tracking features for users to locate nearby commuters and accurately estimate arrival times, leveraging React tools and Tailwind CSS for enhanced styling\",\n            \"Developed a ridesharing progressive web application using TypeScript and React, with seamless backend integration of geocoordinate data\",\n            \"Designed a user-friendly and accessible frontend, prioritizing smooth navigation and efficient API consumption\"\n        ]\n    },\n    , \n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./datas/data.ts\n"));

/***/ })

});